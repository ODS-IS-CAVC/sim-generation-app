/* tslint:disable */
/* eslint-disable */
/**
 * catalogap
 * catalogap
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DownloadScenarioDataRequest
 */
export interface DownloadScenarioDataRequest {
    /**
     * 
     * @type {string}
     * @memberof DownloadScenarioDataRequest
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadScenarioDataRequest
     */
    'dataDivision': string;
}
/**
 * 
 * @export
 * @interface DownloadScenarioDataResponse
 */
export interface DownloadScenarioDataResponse {
    /**
     * 
     * @type {ScenarioDownloadData}
     * @memberof DownloadScenarioDataResponse
     */
    'results'?: ScenarioDownloadData;
}
/**
 * 
 * @export
 * @interface GetCodeListInfo
 */
export interface GetCodeListInfo {
    /**
     * 
     * @type {Array<NearMissInfo>}
     * @memberof GetCodeListInfo
     */
    'nearmissType'?: Array<NearMissInfo>;
    /**
     * 
     * @type {Array<HappenSectionInfo>}
     * @memberof GetCodeListInfo
     */
    'happenSection'?: Array<HappenSectionInfo>;
}
/**
 * 
 * @export
 * @interface GetCodeListResponse
 */
export interface GetCodeListResponse {
    /**
     * 
     * @type {GetCodeListInfo}
     * @memberof GetCodeListResponse
     */
    'results'?: GetCodeListInfo;
}
/**
 * 
 * @export
 * @interface GetLocationListInfo
 */
export interface GetLocationListInfo {
    /**
     * 
     * @type {Array<LocationData>}
     * @memberof GetLocationListInfo
     */
    'happenLocation'?: Array<LocationData>;
}
/**
 * 
 * @export
 * @interface GetLocationListRequest
 */
export interface GetLocationListRequest {
    /**
     * 
     * @type {string}
     * @memberof GetLocationListRequest
     */
    'sectionId': string;
}
/**
 * 
 * @export
 * @interface GetLocationListResponse
 */
export interface GetLocationListResponse {
    /**
     * 
     * @type {GetLocationListInfo}
     * @memberof GetLocationListResponse
     */
    'results'?: GetLocationListInfo;
}
/**
 * 
 * @export
 * @interface GetScenarioDetailRequest
 */
export interface GetScenarioDetailRequest {
    /**
     * 
     * @type {string}
     * @memberof GetScenarioDetailRequest
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface GetScenarioDetailResponse
 */
export interface GetScenarioDetailResponse {
    /**
     * 
     * @type {ScenarioDetailInfo}
     * @memberof GetScenarioDetailResponse
     */
    'results'?: ScenarioDetailInfo;
}
/**
 * 
 * @export
 * @interface GetScenarioListInfo
 */
export interface GetScenarioListInfo {
    /**
     * 
     * @type {number}
     * @memberof GetScenarioListInfo
     */
    'counts'?: number;
    /**
     * 
     * @type {Array<ScenarioInfo>}
     * @memberof GetScenarioListInfo
     */
    'lists'?: Array<ScenarioInfo>;
}
/**
 * 
 * @export
 * @interface GetScenarioListRequest
 */
export interface GetScenarioListRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetScenarioListRequest
     */
    'nearmissType'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetScenarioListRequest
     */
    'happenTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScenarioListRequest
     */
    'happenSection'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScenarioListRequest
     */
    'happenLocation'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetScenarioListRequest
     */
    'requestPage': number;
    /**
     * 
     * @type {number}
     * @memberof GetScenarioListRequest
     */
    'itemsPerPage': number;
}
/**
 * 
 * @export
 * @interface GetScenarioListResponse
 */
export interface GetScenarioListResponse {
    /**
     * 
     * @type {GetScenarioListInfo}
     * @memberof GetScenarioListResponse
     */
    'results'?: GetScenarioListInfo;
}
/**
 * 
 * @export
 * @interface HappenSectionInfo
 */
export interface HappenSectionInfo {
    /**
     * 
     * @type {string}
     * @memberof HappenSectionInfo
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof HappenSectionInfo
     */
    'sectionName'?: string;
}
/**
 * 
 * @export
 * @interface LocationData
 */
export interface LocationData {
    /**
     * 
     * @type {string}
     * @memberof LocationData
     */
    'locationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationData
     */
    'locationName'?: string;
}
/**
 * 
 * @export
 * @interface MachineLearningData
 */
export interface MachineLearningData {
    /**
     * 
     * @type {string}
     * @memberof MachineLearningData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MachineLearningData
     */
    'dataDivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof MachineLearningData
     */
    'size'?: string;
}
/**
 * 
 * @export
 * @interface NearMissInfo
 */
export interface NearMissInfo {
    /**
     * 
     * @type {string}
     * @memberof NearMissInfo
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof NearMissInfo
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface NearmissTypeInfo
 */
export interface NearmissTypeInfo {
    /**
     * 
     * @type {string}
     * @memberof NearmissTypeInfo
     */
    'nearmissType'?: string;
}
/**
 * 
 * @export
 * @interface ScenarioData
 */
export interface ScenarioData {
    /**
     * 
     * @type {string}
     * @memberof ScenarioData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioData
     */
    'dataDivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioData
     */
    'size'?: string;
}
/**
 * 
 * @export
 * @interface ScenarioDetailInfo
 */
export interface ScenarioDetailInfo {
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'id'?: string;
    /**
     * 
     * @type {Array<NearmissTypeInfo>}
     * @memberof ScenarioDetailInfo
     */
    'nearmissTypeList'?: Array<NearmissTypeInfo>;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'videoUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'videoThumbnailUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'scenarioCreateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'sectionName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'latitude'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'longitude'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioDetailInfo
     */
    'uuid'?: string;
    /**
     * 
     * @type {Array<ScenarioData>}
     * @memberof ScenarioDetailInfo
     */
    'scenarioDataList'?: Array<ScenarioData>;
    /**
     * 
     * @type {Array<MachineLearningData>}
     * @memberof ScenarioDetailInfo
     */
    'machineLearningDataList'?: Array<MachineLearningData>;
}
/**
 * 
 * @export
 * @interface ScenarioDownloadData
 */
export interface ScenarioDownloadData {
    /**
     * 
     * @type {string}
     * @memberof ScenarioDownloadData
     */
    'downloadUrl'?: string;
}
/**
 * 
 * @export
 * @interface ScenarioInfo
 */
export interface ScenarioInfo {
    /**
     * 
     * @type {Array<NearmissTypeInfo>}
     * @memberof ScenarioInfo
     */
    'nearmissTypeList'?: Array<NearmissTypeInfo>;
    /**
     * 
     * @type {string}
     * @memberof ScenarioInfo
     */
    'videoThumbnailUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioInfo
     */
    'sectionName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioInfo
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioInfo
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface UploadFrontendLogRequest
 */
export interface UploadFrontendLogRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFrontendLogRequest
     */
    'level'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFrontendLogRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFrontendLogRequest
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFrontendLogRequest
     */
    'functionName'?: string;
}

/**
 * FrontEndLogApi - axios parameter creator
 * @export
 */
export const FrontEndLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * フロントエンドのログデータをアップロードする.
         * @summary フロントエンドのログデータをアップロードする.
         * @param {string} authorization 
         * @param {UploadFrontendLogRequest} uploadFrontendLogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFrontendLog: async (authorization: string, uploadFrontendLogRequest: UploadFrontendLogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('uploadFrontendLog', 'authorization', authorization)
            // verify required parameter 'uploadFrontendLogRequest' is not null or undefined
            assertParamExists('uploadFrontendLog', 'uploadFrontendLogRequest', uploadFrontendLogRequest)
            const localVarPath = `/api/frontendlog/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadFrontendLogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FrontEndLogApi - functional programming interface
 * @export
 */
export const FrontEndLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FrontEndLogApiAxiosParamCreator(configuration)
    return {
        /**
         * フロントエンドのログデータをアップロードする.
         * @summary フロントエンドのログデータをアップロードする.
         * @param {string} authorization 
         * @param {UploadFrontendLogRequest} uploadFrontendLogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFrontendLog(authorization: string, uploadFrontendLogRequest: UploadFrontendLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFrontendLog(authorization, uploadFrontendLogRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FrontEndLogApi - factory interface
 * @export
 */
export const FrontEndLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FrontEndLogApiFp(configuration)
    return {
        /**
         * フロントエンドのログデータをアップロードする.
         * @summary フロントエンドのログデータをアップロードする.
         * @param {string} authorization 
         * @param {UploadFrontendLogRequest} uploadFrontendLogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFrontendLog(authorization: string, uploadFrontendLogRequest: UploadFrontendLogRequest, options?: any): AxiosPromise<void> {
            return localVarFp.uploadFrontendLog(authorization, uploadFrontendLogRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FrontEndLogApi - object-oriented interface
 * @export
 * @class FrontEndLogApi
 * @extends {BaseAPI}
 */
export class FrontEndLogApi extends BaseAPI {
    /**
     * フロントエンドのログデータをアップロードする.
     * @summary フロントエンドのログデータをアップロードする.
     * @param {string} authorization 
     * @param {UploadFrontendLogRequest} uploadFrontendLogRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontEndLogApi
     */
    public uploadFrontendLog(authorization: string, uploadFrontendLogRequest: UploadFrontendLogRequest, options?: AxiosRequestConfig) {
        return FrontEndLogApiFp(this.configuration).uploadFrontendLog(authorization, uploadFrontendLogRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScenarioCodeApi - axios parameter creator
 * @export
 */
export const ScenarioCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @summary シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCodeList', 'authorization', authorization)
            const localVarPath = `/api/codes/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @summary 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @param {GetLocationListRequest} getLocationListRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationList: async (getLocationListRequest: GetLocationListRequest, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getLocationListRequest' is not null or undefined
            assertParamExists('getLocationList', 'getLocationListRequest', getLocationListRequest)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLocationList', 'authorization', authorization)
            const localVarPath = `/api/codes/locationList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (getLocationListRequest !== undefined) {
                localVarQueryParameter['getLocationListRequest'] = getLocationListRequest;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScenarioCodeApi - functional programming interface
 * @export
 */
export const ScenarioCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenarioCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @summary シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCodeList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCodeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCodeList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @summary 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @param {GetLocationListRequest} getLocationListRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationList(getLocationListRequest: GetLocationListRequest, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLocationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationList(getLocationListRequest, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScenarioCodeApi - factory interface
 * @export
 */
export const ScenarioCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScenarioCodeApiFp(configuration)
    return {
        /**
         * シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @summary シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeList(authorization: string, options?: any): AxiosPromise<GetCodeListResponse> {
            return localVarFp.getCodeList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @summary 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
         * @param {GetLocationListRequest} getLocationListRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationList(getLocationListRequest: GetLocationListRequest, authorization: string, options?: any): AxiosPromise<GetLocationListResponse> {
            return localVarFp.getLocationList(getLocationListRequest, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScenarioCodeApi - object-oriented interface
 * @export
 * @class ScenarioCodeApi
 * @extends {BaseAPI}
 */
export class ScenarioCodeApi extends BaseAPI {
    /**
     * シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
     * @summary シナリオの属性管理テーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioCodeApi
     */
    public getCodeList(authorization: string, options?: AxiosRequestConfig) {
        return ScenarioCodeApiFp(this.configuration).getCodeList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
     * @summary 場所マスタテーブルから引数をもとにシナリオ検索画面の検索条件に使用するデータを取得する.
     * @param {GetLocationListRequest} getLocationListRequest 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioCodeApi
     */
    public getLocationList(getLocationListRequest: GetLocationListRequest, authorization: string, options?: AxiosRequestConfig) {
        return ScenarioCodeApiFp(this.configuration).getLocationList(getLocationListRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScenarioDataDownloadApi - axios parameter creator
 * @export
 */
export const ScenarioDataDownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
         * @summary 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
         * @param {DownloadScenarioDataRequest} downloadScenarioDataRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadScenarioData: async (downloadScenarioDataRequest: DownloadScenarioDataRequest, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadScenarioDataRequest' is not null or undefined
            assertParamExists('downloadScenarioData', 'downloadScenarioDataRequest', downloadScenarioDataRequest)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('downloadScenarioData', 'authorization', authorization)
            const localVarPath = `/api/scenario/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (downloadScenarioDataRequest !== undefined) {
                localVarQueryParameter['downloadScenarioDataRequest'] = downloadScenarioDataRequest;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScenarioDataDownloadApi - functional programming interface
 * @export
 */
export const ScenarioDataDownloadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenarioDataDownloadApiAxiosParamCreator(configuration)
    return {
        /**
         * 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
         * @summary 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
         * @param {DownloadScenarioDataRequest} downloadScenarioDataRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadScenarioData(downloadScenarioDataRequest: DownloadScenarioDataRequest, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadScenarioDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadScenarioData(downloadScenarioDataRequest, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScenarioDataDownloadApi - factory interface
 * @export
 */
export const ScenarioDataDownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScenarioDataDownloadApiFp(configuration)
    return {
        /**
         * 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
         * @summary 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
         * @param {DownloadScenarioDataRequest} downloadScenarioDataRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadScenarioData(downloadScenarioDataRequest: DownloadScenarioDataRequest, authorization: string, options?: any): AxiosPromise<DownloadScenarioDataResponse> {
            return localVarFp.downloadScenarioData(downloadScenarioDataRequest, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScenarioDataDownloadApi - object-oriented interface
 * @export
 * @class ScenarioDataDownloadApi
 * @extends {BaseAPI}
 */
export class ScenarioDataDownloadApi extends BaseAPI {
    /**
     * 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
     * @summary 引数をもとにシナリオのデータおよび機械学習用の画像のデータをダウンロードする.
     * @param {DownloadScenarioDataRequest} downloadScenarioDataRequest 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioDataDownloadApi
     */
    public downloadScenarioData(downloadScenarioDataRequest: DownloadScenarioDataRequest, authorization: string, options?: AxiosRequestConfig) {
        return ScenarioDataDownloadApiFp(this.configuration).downloadScenarioData(downloadScenarioDataRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScenarioListApi - axios parameter creator
 * @export
 */
export const ScenarioListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 引数をもとにシナリオ詳細画面に使用するデータを取得する.
         * @summary 引数をもとにシナリオ詳細画面に使用するデータを取得する.
         * @param {GetScenarioDetailRequest} getScenarioDetailRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScenarioDetail: async (getScenarioDetailRequest: GetScenarioDetailRequest, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getScenarioDetailRequest' is not null or undefined
            assertParamExists('getScenarioDetail', 'getScenarioDetailRequest', getScenarioDetailRequest)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScenarioDetail', 'authorization', authorization)
            const localVarPath = `/api/scenario/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (getScenarioDetailRequest !== undefined) {
                localVarQueryParameter['getScenarioDetailRequest'] = getScenarioDetailRequest;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
         * @summary 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
         * @param {GetScenarioListRequest} getScenarioListRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScenarioList: async (getScenarioListRequest: GetScenarioListRequest, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getScenarioListRequest' is not null or undefined
            assertParamExists('getScenarioList', 'getScenarioListRequest', getScenarioListRequest)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScenarioList', 'authorization', authorization)
            const localVarPath = `/api/scenario/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (getScenarioListRequest !== undefined) {
                localVarQueryParameter['getScenarioListRequest'] = getScenarioListRequest;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScenarioListApi - functional programming interface
 * @export
 */
export const ScenarioListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenarioListApiAxiosParamCreator(configuration)
    return {
        /**
         * 引数をもとにシナリオ詳細画面に使用するデータを取得する.
         * @summary 引数をもとにシナリオ詳細画面に使用するデータを取得する.
         * @param {GetScenarioDetailRequest} getScenarioDetailRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScenarioDetail(getScenarioDetailRequest: GetScenarioDetailRequest, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScenarioDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScenarioDetail(getScenarioDetailRequest, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
         * @summary 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
         * @param {GetScenarioListRequest} getScenarioListRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScenarioList(getScenarioListRequest: GetScenarioListRequest, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScenarioListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScenarioList(getScenarioListRequest, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScenarioListApi - factory interface
 * @export
 */
export const ScenarioListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScenarioListApiFp(configuration)
    return {
        /**
         * 引数をもとにシナリオ詳細画面に使用するデータを取得する.
         * @summary 引数をもとにシナリオ詳細画面に使用するデータを取得する.
         * @param {GetScenarioDetailRequest} getScenarioDetailRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScenarioDetail(getScenarioDetailRequest: GetScenarioDetailRequest, authorization: string, options?: any): AxiosPromise<GetScenarioDetailResponse> {
            return localVarFp.getScenarioDetail(getScenarioDetailRequest, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
         * @summary 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
         * @param {GetScenarioListRequest} getScenarioListRequest 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScenarioList(getScenarioListRequest: GetScenarioListRequest, authorization: string, options?: any): AxiosPromise<GetScenarioListResponse> {
            return localVarFp.getScenarioList(getScenarioListRequest, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScenarioListApi - object-oriented interface
 * @export
 * @class ScenarioListApi
 * @extends {BaseAPI}
 */
export class ScenarioListApi extends BaseAPI {
    /**
     * 引数をもとにシナリオ詳細画面に使用するデータを取得する.
     * @summary 引数をもとにシナリオ詳細画面に使用するデータを取得する.
     * @param {GetScenarioDetailRequest} getScenarioDetailRequest 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioListApi
     */
    public getScenarioDetail(getScenarioDetailRequest: GetScenarioDetailRequest, authorization: string, options?: AxiosRequestConfig) {
        return ScenarioListApiFp(this.configuration).getScenarioDetail(getScenarioDetailRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
     * @summary 引数をもとにシナリオ検索画面の検索結果一覧に使用するデータを取得する.
     * @param {GetScenarioListRequest} getScenarioListRequest 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioListApi
     */
    public getScenarioList(getScenarioListRequest: GetScenarioListRequest, authorization: string, options?: AxiosRequestConfig) {
        return ScenarioListApiFp(this.configuration).getScenarioList(getScenarioListRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}


